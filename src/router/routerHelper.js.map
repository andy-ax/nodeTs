{"version":3,"file":"routerHelper.js","sourceRoot":"","sources":["routerHelper.ts"],"names":[],"mappings":";;;AAMA,MAAa,YAAY;IAAzB;QACI;;WAEG;QACH,WAAM,GAAQ;YACV,GAAG,EAAE,EAAE;YACP,IAAI,EAAE,EAAE;YACR,GAAG,EAAE,EAAE;YACP,MAAM,EAAE,EAAE;SACb,CAAC;QAEF;;WAEG;QACH,SAAI,GAAW,EAAE,CAAC;IA+EtB,CAAC;IA7EG;;;;;OAKG;IACK,GAAG,CAAC,IAAY,EAAE,IAAY,EAAE,MAAgB;QACpD,IAAI,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;QAE1B,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;YAC1B,IAAI,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,EAAE;gBACpC,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,aAAa,CAAC,CAAC;aAC9D;QACL,CAAC,CAAC,CAAC;QACH,MAAM,GAAG,GAAG,IAAI,MAAM,CAAC,GAAG,GAAG,IAAI,GAAG,GAAG,CAAC,CAAC;QAEzC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC;YACnB,IAAI,EAAE,GAAG;YACT,MAAM,EAAE,MAAM;SACjB,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IAEF,IAAI,CAAC,IAAY,EAAE,MAAgB;QAC/B,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;IACnC,CAAC;IAED,MAAM,CAAC,IAAY,EAAE,MAAgB;QACjC,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,QAAQ,EAAE,MAAM,CAAC,CAAC;IACrC,CAAC;IAED,GAAG,CAAC,IAAY,EAAE,MAAgB;QAC9B,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;IAClC,CAAC;IAED,GAAG,CAAC,IAAY,EAAE,MAAgB;QAC9B,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;IAClC,CAAC;IAED;;;;;OAKG;IACH,OAAO,CAAC,OAAe,EAAE,MAAc,EAAE,aAAqB;QAC1D,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;YACX,OAAO,EAAE,OAAO;YAChB,MAAM,EAAE,MAAM;YACd,aAAa,EAAE,aAAa;SAC/B,CAAC,CAAC;IACP,CAAC;IAED,SAAS,CAAC,GAAY,EAAE,QAAgB;QACpC,IAAI,KAAK,EACL,CAAC,EACD,GAAG,EACH,MAAM,EACN,IAAI,EACJ,IAAI,GAAG,GAAG,CAAC,MAAM,CAAC;QAEtB,KAAK,CAAC,GAAG,CAAC,EAAC,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;YACrD,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;YAC7B,MAAM,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YACnC,IAAI,MAAM,EAAE;gBACR,KAAK,CAAC,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC;gBACzB,MAAM,CAAC,KAAK,EAAE,CAAC;gBACf,gBAAgB;gBAChB,IAAI,GAAG,EAAE,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;gBAEzB,OAAO;oBACH,MAAM,EAAE,KAAK,CAAC,MAAM;oBACpB,IAAI,EAAE,IAAI;iBACb,CAAC;aACL;SACJ;QACD,OAAO,KAAK,CAAC;IACjB,CAAC;IAAA,CAAC;CACL;AA7FD,oCA6FC","sourcesContent":["type rule = {\r\n    execStr: string,\r\n    regExp: RegExp,\r\n    replaceRegExp: string,\r\n}\r\n\r\nexport class RouterHelper {\r\n    /**\r\n     * 匹配好的路径正则列表\r\n     */\r\n    routes: any = {\r\n        GET: [],\r\n        POST: [],\r\n        PUT: [],\r\n        DELETE: []\r\n    };\r\n\r\n    /**\r\n     * 规则列表\r\n     */\r\n    rule: rule[] = [];\r\n\r\n    /**\r\n     * 根据之前添加的规则，匹配所选路径符合哪个回调，如果符合则推入路径正则列表中\r\n     * @param path\r\n     * @param type\r\n     * @param action 回调\r\n     */\r\n    private use(path: string, type: string, action: Function) {\r\n        type = type.toUpperCase();\r\n\r\n        this.rule.forEach((ruleObj) => {\r\n            if (path.indexOf(ruleObj.execStr) > -1) {\r\n                path = path.replace(ruleObj.regExp, ruleObj.replaceRegExp);\r\n            }\r\n        });\r\n        const exp = new RegExp('^' + path + '$');\r\n\r\n        this.routes[type].push({\r\n            path: exp,\r\n            action: action\r\n        });\r\n    };\r\n\r\n    post(path: string, action: Function) {\r\n        this.use(path, 'post', action);\r\n    }\r\n\r\n    delete(path: string, action: Function) {\r\n        this.use(path, 'delete', action);\r\n    }\r\n\r\n    put(path: string, action: Function) {\r\n        this.use(path, 'put', action);\r\n    }\r\n\r\n    get(path: string, action: Function) {\r\n        this.use(path, 'get', action);\r\n    }\r\n\r\n    /**\r\n     * 占位符规则添加\r\n     * @param execStr 占位符 以:开始\r\n     * @param regExp 占位符匹配\r\n     * @param replaceRegExp 匹配到占位符之后将替换为真正的正则匹配\r\n     */\r\n    addRule(execStr: string, regExp: RegExp, replaceRegExp: string) {\r\n        this.rule.push({\r\n            execStr: execStr,\r\n            regExp: regExp,\r\n            replaceRegExp: replaceRegExp\r\n        });\r\n    }\r\n\r\n    checkPath(req: Request, pathname: string) {\r\n        let route,\r\n            i,\r\n            len,\r\n            result,\r\n            args,\r\n            type = req.method;\r\n\r\n        for (i = 0,len = this.routes[type].length; i < len; i++) {\r\n            route = this.routes[type][i];\r\n            result = route.path.exec(pathname);\r\n            if (result) {\r\n                route.path.lastIndex = 0;\r\n                result.shift();\r\n                //将req,res与匹配项叠加\r\n                args = [].concat(result);\r\n\r\n                return {\r\n                    action: route.action,\r\n                    args: args\r\n                };\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n}\r\n"]}