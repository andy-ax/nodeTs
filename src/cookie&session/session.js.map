{"version":3,"file":"session.js","sourceRoot":"","sources":["session.ts"],"names":[],"mappings":";;;AAYA,MAAa,OAAO;IAOhB;;;OAGG;IACH,MAAM,CAAC,aAAa,CAAC,OAAe;QAChC,OAAO,CAAC,OAAO,GAAG,OAAO,CAAC;IAC9B,CAAC;IAED;;;;OAIG;IACH,MAAM,CAAC,eAAe,CAAC,IAAS;QAC5B,MAAM,UAAU,GAAY;YACxB,QAAQ;YACR,IAAI,EAAE,OAAO,CAAC,WAAW,EAAE;YAC3B,IAAI,EAAE,IAAI;YACV,MAAM,EAAE;gBACJ,cAAc;gBACd,MAAM,EAAE,OAAO,CAAC,cAAc,EAAE;aACnC;SACJ,CAAC;QACF,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,UAAU,CAAC;QAC/C,OAAO,UAAU,CAAC;IACtB,CAAC;IAED;;;;;OAKG;IACH,MAAM,CAAC,YAAY,CAAC,IAAY,EAAE,OAAiB,EAAE,IAAc;QAC/D,MAAM,OAAO,GAAG,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QACvC,IAAI,OAAO,EAAE;YACT,MAAM,IAAI,GAAG,CAAC,IAAI,IAAI,CAAC,CAAC,OAAO,EAAE,CAAC;YAClC,IAAI,OAAO,CAAC,MAAM,CAAC,MAAM,GAAG,IAAI,EAAE;gBAC9B,OAAO,CAAC,MAAM,CAAC,MAAM,GAAG,IAAI,GAAG,OAAO,CAAC,OAAO,CAAC;gBAC/C,OAAO,CAAC,OAAO,CAAC,CAAC;aACpB;iBAAM;gBACH,OAAO,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;gBAC9B,IAAI,EAAE,CAAC;aACV;SACJ;aAAM;YACH,IAAI,EAAE,CAAC;SACV;IACL,CAAC;IAEO,MAAM,CAAC,WAAW;QACtB,OAAO,CAAC,IAAI,IAAI,EAAE,CAAC,CAAC,OAAO,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC;IACvD,CAAC;IAEO,MAAM,CAAC,cAAc;QACzB,OAAO,CAAC,IAAI,IAAI,EAAE,CAAC,CAAC,OAAO,EAAE,GAAG,OAAO,CAAC,OAAO,CAAC;IACpD,CAAC;;AA9DL,0BA+DC;AA9DG;;GAEG;AACI,gBAAQ,GAAa,EAAE,CAAC;AACxB,eAAO,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC","sourcesContent":["type session = {\r\n    s_id: string,\r\n    user: any,\r\n    cookie: {\r\n        expire: number\r\n    }\r\n}\r\n\r\ntype sessions = {\r\n    [key: string]: session;\r\n}\r\n\r\nexport class Session {\r\n    /**\r\n     * 存储session，后续将使用服务器存储\r\n     */\r\n    static sessions: sessions = {};\r\n    static EXPIRES = 20 * 60 * 1000;\r\n\r\n    /**\r\n     * 设定超时时间\r\n     * @param {number} expires\r\n     */\r\n    static configExpires(expires: number) {\r\n        Session.EXPIRES = expires;\r\n    }\r\n\r\n    /**\r\n     * 生成session\r\n     * @param user\r\n     * @return {{s_id: *, cookie: {expire: *}}}\r\n     */\r\n    static generateSession(user: any): session {\r\n        const newSession: session = {\r\n            //生成唯一id\r\n            s_id: Session.generateSId(),\r\n            user: user,\r\n            cookie: {\r\n                //设置cookie超时时间\r\n                expire: Session.setExpiresTime()\r\n            }\r\n        };\r\n        Session.sessions[newSession.s_id] = newSession;\r\n        return newSession;\r\n    }\r\n\r\n    /**\r\n     * 检查session是否存在，并判断是否超时，如未超时则更新超时时间并成功返回\r\n     * @param {string} s_id\r\n     * @param {function} [success]\r\n     * @param {function} [fail]\r\n     */\r\n    static checkSession(s_id: string, success: Function, fail: Function) {\r\n        const session = Session.sessions[s_id];\r\n        if (session) {\r\n            const date = (new Date).valueOf();\r\n            if (session.cookie.expire > date) {\r\n                session.cookie.expire = date + Session.EXPIRES;\r\n                success(session);\r\n            } else {\r\n                delete Session.sessions[s_id];\r\n                fail();\r\n            }\r\n        } else {\r\n            fail();\r\n        }\r\n    }\r\n\r\n    private static generateSId() {\r\n        return (new Date()).valueOf() + '' + Math.random();\r\n    }\r\n\r\n    private static setExpiresTime(): number {\r\n        return (new Date()).valueOf() + Session.EXPIRES;\r\n    }\r\n}"]}