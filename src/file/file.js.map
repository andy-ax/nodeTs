{"version":3,"file":"file.js","sourceRoot":"","sources":["file.ts"],"names":[],"mappings":"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","sourcesContent":["const fs = require('fs');\r\n// import fs from 'node/fs';\r\nconst buffer = require('buffer');\r\nimport {insertBuffer, array2Buffer} from './buffer'\r\nimport {FileError} from './fileError';\r\n\r\nexport class File {\r\n\r\n    /**\r\n     * 使用流读取文件\r\n     * @param filePath\r\n     */\r\n    static readFileStream(filePath: string): Promise<any> {\r\n        return new Promise((res, rej)=>{\r\n            let readStream = fs.createReadStream(filePath);\r\n            let data = '';\r\n            readStream\r\n                .on('data', (chunk: any) => {\r\n                    data+=chunk;\r\n                })\r\n                .on('end', function () {\r\n                    res(data);\r\n                })\r\n                .on('error', (err: Error) => {\r\n                    rej(err);\r\n                });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 读取文件\r\n     * @param filePath\r\n     */\r\n    static readFile(filePath: string) {\r\n        return new Promise((res, rej) => {\r\n            fs.readFile(filePath, (err: Error, file: any) => {\r\n                if (err) {\r\n                    rej(err)\r\n                } else {\r\n                    res(file);\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 读取文件信息\r\n     * @param filePath\r\n     */\r\n    static readFileMsg(filePath: string): Promise<any> {\r\n        return new Promise((res, rej) => {\r\n            fs.stat(filePath, function (err: Error, stat: any) {\r\n                if (err) {\r\n                    rej(err);\r\n                } else {\r\n                    res(stat);\r\n                }\r\n            })\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 使用流写入文件\r\n     * @param file\r\n     * @param path\r\n     * @param encode\r\n     */\r\n    static writeFile(file: any, path: string, encode?: string): Promise<void> {\r\n        return new Promise<void>((res, rej) => {\r\n            encode = encode || 'utf-8';\r\n            const wS = fs.createWriteStream(path);\r\n            wS.write(file, encode, function () {\r\n                wS.end();\r\n            });\r\n            wS.on('finish', function () {\r\n                res();\r\n            });\r\n            wS.on('error', function (err: Error) {\r\n                rej(err);\r\n            })\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 拷贝文件\r\n     * @param readPath\r\n     * @param writePath\r\n     */\r\n    static copyFile(readPath: string, writePath: string): Promise<void> {\r\n        return new Promise<void>((res, rej) => {\r\n            fs.createReadStream(readPath)\r\n                .on('end', function () {\r\n                    res();\r\n                })\r\n                .on('error', function (err: Error) {\r\n                    rej(err);\r\n                })\r\n                .pipe(fs.createWriteStream(writePath));\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 向文件指定位置添加文本\r\n     * @param path\r\n     * @param text\r\n     * @param start\r\n     * @param encode\r\n     */\r\n    static addTextToFile(path: string, text: string, start: number, encode?: string): Promise<void> {\r\n        return new Promise<void>((res, rej) => {\r\n            encode = encode || 'utf-8';\r\n            let buffers:any [] = [];\r\n            fs.createReadStream(path)\r\n                .on('data', (buf: any) => {\r\n                    buffers.push(buf);\r\n                })\r\n                .on('end', function () {\r\n                    const fileBuf = new Buffer(text);\r\n                    const fileText = insertBuffer(\r\n                        array2Buffer(buffers),\r\n                        fileBuf,\r\n                        start || 0\r\n                    );\r\n                    File.writeFile(fileText, path, encode).then(() => {\r\n                        res();\r\n                    }).catch((err: Error) => {\r\n                        rej(err)\r\n                    })\r\n                })\r\n        });\r\n    }\r\n}"]}